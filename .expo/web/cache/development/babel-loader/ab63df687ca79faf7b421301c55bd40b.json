{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Web dev\\\\DOConnect\\\\app\\\\screens\\\\RegisterScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Button, Icon, Input, Layout } from \"@ui-kitten/components\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Register } from \"../auth/auth\";\nimport { auth, firestore } from \"../auth/firebase\";\nimport ErrorMsg from \"../components/ErrorMsg\";\nimport FormField from \"../components/forms/FormField\";\nimport Form from \"../components/forms/Form\";\nimport SubmitForm from \"../components/forms/SubmitForm\";\nimport firebase from \"firebase\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setUser } from \"../redux/actions/authActions\";\nimport { CustomSpinner } from \"./CustomSpinner\";\nimport { USER_TYPE } from \"../redux/constants\";\n\nvar AlertIcon = function AlertIcon(props) {\n  return React.createElement(Icon, _extends({}, props, {\n    name: \"alert-circle-outline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 30\n    }\n  }));\n};\n\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  pass1: Yup.string().required().min(5).label(\"Password\"),\n  pass2: Yup.string().required().min(5).label(\"Confirm Password\").oneOf([Yup.ref(\"pass1\")], \"Passwords do not match\")\n});\n\nfunction RegisterScreen(_ref) {\n  var _this2 = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      secureTextEntry = _React$useState2[0],\n      setSecureTextEntry = _React$useState2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var auth = useSelector(function (state) {\n    return state.auth;\n  });\n  var dispatch = useDispatch();\n\n  var handleRegister = function handleRegister(_ref2) {\n    var email, pass1, user, _auth$user$hospital, _auth$user, _auth$user$hospital2, userData, newUser, _userData, _newUser;\n\n    return _regeneratorRuntime.async(function handleRegister$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref2.email, pass1 = _ref2.pass1;\n            _context.prev = 1;\n            setIsLoading(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Register(email, pass1));\n\n          case 5:\n            user = _context.sent;\n\n            if (!(user != null && user.user)) {\n              _context.next = 22;\n              break;\n            }\n\n            if (!(auth.userType == USER_TYPE.DOCTOR)) {\n              _context.next = 17;\n              break;\n            }\n\n            userData = {\n              email: email,\n              isProfileSet: false,\n              hospitalRef: \"/hospitals/\" + ((_auth$user$hospital = auth.user.hospital) == null ? void 0 : _auth$user$hospital.id)\n            };\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(firestore.collection(\"doctors\").add(userData));\n\n          case 11:\n            newUser = _context.sent;\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(firestore.collection(\"hospitals\").doc((_auth$user = auth.user) == null ? void 0 : (_auth$user$hospital2 = _auth$user.hospital) == null ? void 0 : _auth$user$hospital2.id).set({\n              doctorsRef: firebase.firestore.FieldValue.arrayUnion(\"/doctors/\" + newUser.id)\n            }, {\n              merge: true\n            }));\n\n          case 14:\n            if (newUser.id) {\n              dispatch(setUser(_objectSpread({\n                id: newUser.id\n              }, newUser.get()))).then(function (res) {\n                setIsLoading(false);\n                navigation.navigate(\"DoctorRegistrationForm\");\n              });\n            }\n\n            _context.next = 22;\n            break;\n\n          case 17:\n            _userData = {\n              email: email,\n              isProfileSet: false\n            };\n            _context.next = 20;\n            return _regeneratorRuntime.awrap(firestore.collection(\"patients\").add(_userData));\n\n          case 20:\n            _newUser = _context.sent;\n\n            if (_newUser.id) {\n              dispatch(setUser(_objectSpread({\n                id: _newUser.id\n              }, _newUser.get()))).then(function (res) {\n                setIsLoading(false);\n                navigation.navigate(\"PersonalDetailsForm\");\n              }).catch(function (e) {\n                console.log(e.message);\n              });\n            }\n\n          case 22:\n            _context.next = 27;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](1);\n            alert(_context.t0.message);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 24]], Promise);\n  };\n\n  var toggleSecureEntry = function toggleSecureEntry() {\n    setSecureTextEntry(!secureTextEntry);\n  };\n\n  var renderIcon = function renderIcon(props) {\n    return React.createElement(TouchableWithoutFeedback, {\n      onPress: toggleSecureEntry,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }\n    }, React.createElement(Icon, _extends({}, props, {\n      name: secureTextEntry ? \"eye-off\" : \"eye\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    })));\n  };\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, React.createElement(Layout, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, React.createElement(CustomSpinner, {\n    visibel: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), React.createElement(Image, {\n    source: require(\"../asset/register.png\"),\n    style: {\n      height: 300,\n      width: 300\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), React.createElement(Form, {\n    initialValues: {\n      email: \"\",\n      pass1: \"\",\n      pass2: \"\"\n    },\n    onSubmit: handleRegister,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, React.createElement(FormField, {\n    label: \"Email\",\n    placeholder: \"Email\",\n    name: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    label: \"Password\",\n    name: \"pass1\",\n    placeholder: \"Password\",\n    accessoryRight: renderIcon,\n    captionIcon: AlertIcon,\n    secureTextEntry: secureTextEntry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    label: \"Confirm Password\",\n    placeholder: \"Confirm Password\",\n    name: \"pass2\",\n    accessoryRight: renderIcon,\n    captionIcon: AlertIcon,\n    secureTextEntry: secureTextEntry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }), React.createElement(SubmitForm, {\n    label: \"Register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 10,\n    alignItems: \"center\"\n  },\n  inputFields: {\n    paddingVertical: 10,\n    width: 300\n  },\n  btns: {\n    width: 300,\n    marginVertical: 5\n  }\n});\nexport default RegisterScreen;","map":{"version":3,"sources":["D:/Web dev/DOConnect/app/screens/RegisterScreen.js"],"names":["React","useReducer","useState","Button","Icon","Input","Layout","Formik","Yup","Register","auth","firestore","ErrorMsg","FormField","Form","SubmitForm","firebase","useSelector","useDispatch","setUser","CustomSpinner","USER_TYPE","AlertIcon","props","validationSchema","object","shape","email","string","required","label","pass1","min","pass2","oneOf","ref","RegisterScreen","navigation","route","secureTextEntry","setSecureTextEntry","isLoading","setIsLoading","state","dispatch","handleRegister","user","userType","DOCTOR","userData","isProfileSet","hospitalRef","hospital","id","collection","add","newUser","doc","set","doctorsRef","FieldValue","arrayUnion","merge","get","then","res","navigate","catch","e","console","log","message","alert","toggleSecureEntry","renderIcon","styles","container","require","height","width","StyleSheet","create","paddingHorizontal","alignItems","inputFields","paddingVertical","btns","marginVertical"],"mappings":"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","sourcesContent":["import React, { useReducer, useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  TouchableWithoutFeedback,\r\n  Image,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { Button, Icon, Input, Layout } from \"@ui-kitten/components\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Register } from \"../auth/auth\";\r\nimport { auth, firestore } from \"../auth/firebase\";\r\n\r\nimport ErrorMsg from \"../components/ErrorMsg\";\r\nimport FormField from \"../components/forms/FormField\";\r\nimport Form from \"../components/forms/Form\";\r\nimport SubmitForm from \"../components/forms/SubmitForm\";\r\nimport firebase from \"firebase\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../redux/actions/authActions\";\r\nimport { CustomSpinner } from \"./CustomSpinner\";\r\nimport { USER_TYPE } from \"../redux/constants\";\r\n\r\nconst AlertIcon = (props) => <Icon {...props} name=\"alert-circle-outline\" />;\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  // name: Yup.string().trim().required(\"*Required\").label(\"Name\"),\r\n  email: Yup.string().required().email().label(\"Email\"),\r\n  pass1: Yup.string().required().min(5).label(\"Password\"),\r\n  pass2: Yup.string()\r\n    .required()\r\n    .min(5)\r\n    .label(\"Confirm Password\")\r\n    .oneOf([Yup.ref(\"pass1\")], \"Passwords do not match\"),\r\n});\r\n\r\nfunction RegisterScreen({ navigation, route }) {\r\n  // const { type, hospitalDetails } = route.params;\r\n\r\n  const [secureTextEntry, setSecureTextEntry] = React.useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Redux state\r\n  const auth = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  // console.log(type, hospitalDetails);\r\n\r\n  const handleRegister = async ({ email, pass1 }) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const user = await Register(email, pass1);\r\n\r\n      if (user?.user) {\r\n        if (auth.userType == USER_TYPE.DOCTOR) {\r\n          const userData = {\r\n            email,\r\n            isProfileSet: false,\r\n            hospitalRef: `/hospitals/${auth.user.hospital?.id}`,\r\n          };\r\n\r\n          const newUser = await firestore.collection(\"doctors\").add(userData);\r\n\r\n          // Adding new doctor to hospital\r\n          await firestore\r\n            .collection(\"hospitals\")\r\n            .doc(auth.user?.hospital?.id)\r\n            .set(\r\n              {\r\n                doctorsRef: firebase.firestore.FieldValue.arrayUnion(\r\n                  `/doctors/${newUser.id}`\r\n                ),\r\n              },\r\n              { merge: true }\r\n            );\r\n\r\n          if (newUser.id) {\r\n            dispatch(setUser({ id: newUser.id, ...newUser.get() })).then(\r\n              (res) => {\r\n                setIsLoading(false);\r\n                navigation.navigate(\"DoctorRegistrationForm\");\r\n              }\r\n            );\r\n          }\r\n        } else {\r\n          const userData = {\r\n            email,\r\n            isProfileSet: false,\r\n          };\r\n\r\n          const newUser = await firestore.collection(\"patients\").add(userData);\r\n\r\n          if (newUser.id) {\r\n            dispatch(setUser({ id: newUser.id, ...newUser.get() }))\r\n              .then((res) => {\r\n                setIsLoading(false);\r\n                navigation.navigate(\"PersonalDetailsForm\");\r\n              })\r\n              .catch((e) => {\r\n                console.log(e.message);\r\n              });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleSecureEntry = () => {\r\n    setSecureTextEntry(!secureTextEntry);\r\n  };\r\n\r\n  const renderIcon = (props) => (\r\n    <TouchableWithoutFeedback onPress={toggleSecureEntry}>\r\n      <Icon {...props} name={secureTextEntry ? \"eye-off\" : \"eye\"} />\r\n    </TouchableWithoutFeedback>\r\n  );\r\n  return (\r\n    <ScrollView>\r\n      <Layout style={styles.container}>\r\n        <CustomSpinner visibel={isLoading} />\r\n        <Image\r\n          source={require(\"../asset/register.png\")}\r\n          style={{ height: 300, width: 300 }}\r\n        />\r\n        {/* <Layout style={styles.container}> */}\r\n        <Form\r\n          initialValues={{\r\n            email: \"\",\r\n            pass1: \"\",\r\n            pass2: \"\",\r\n          }}\r\n          onSubmit={handleRegister}\r\n          validationSchema={validationSchema}\r\n        >\r\n          <FormField label=\"Email\" placeholder=\"Email\" name=\"email\" />\r\n          <FormField\r\n            label=\"Password\"\r\n            name=\"pass1\"\r\n            placeholder=\"Password\"\r\n            // caption=\"Should contain at least 5 characters\"\r\n            accessoryRight={renderIcon}\r\n            captionIcon={AlertIcon}\r\n            secureTextEntry={secureTextEntry}\r\n          />\r\n          <FormField\r\n            label=\"Confirm Password\"\r\n            placeholder=\"Confirm Password\"\r\n            name=\"pass2\"\r\n            // caption=\"Should contain at least 5 characters\"\r\n            accessoryRight={renderIcon}\r\n            captionIcon={AlertIcon}\r\n            secureTextEntry={secureTextEntry}\r\n          />\r\n          <SubmitForm label=\"Register\" />\r\n\r\n          {/* {({ handleChange, handleSubmit, errors }) => (\r\n            <>\r\n              <View style={styles.inputFields}>\r\n                <Input\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  onChangeText={() => handleChange(\"name\")}\r\n                />\r\n                <ErrorMsg>{errors.name}</ErrorMsg>\r\n\r\n                <Input\r\n                  label=\"Email\"\r\n                  placeholder=\"Email\"\r\n                  onChangeText={handleChange(\"email\")}\r\n                />\r\n                <ErrorMsg>{errors.email}</ErrorMsg>\r\n\r\n                <Input\r\n                  label=\"Password\"\r\n                  placeholder=\"Password\"\r\n                  caption=\"Should contain at least 5 characters\"\r\n                  accessoryRight={renderIcon}\r\n                  captionIcon={AlertIcon}\r\n                  secureTextEntry={secureTextEntry}\r\n                  onChangeText={handleChange(\"pass1\")}\r\n                />\r\n                <ErrorMsg>{errors.pass1}</ErrorMsg>\r\n\r\n                <Input\r\n                  label=\"Confirm Password\"\r\n                  placeholder=\"Confirm Password\"\r\n                  caption=\"Should contain at least 8 symbols\"\r\n                  accessoryRight={renderIcon}\r\n                  captionIcon={AlertIcon}\r\n                  secureTextEntry={secureTextEntry}\r\n                  onChangeText={handleChange(\"pass2\")}\r\n                />\r\n                <ErrorMsg>{errors.pass2}</ErrorMsg>\r\n              </View>\r\n              <View>\r\n                <Button style={styles.btns} onPress={handleSubmit}>\r\n                  REGISTER\r\n                </Button>\r\n              </View>\r\n            </>\r\n          )} */}\r\n        </Form>\r\n        {/* </Layout> */}\r\n      </Layout>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    // marginVertical: 100,\r\n    paddingHorizontal: 10,\r\n    alignItems: \"center\",\r\n    // justifyContent: \"center\",\r\n  },\r\n  inputFields: {\r\n    paddingVertical: 10,\r\n    width: 300,\r\n  },\r\n  btns: {\r\n    width: 300,\r\n    marginVertical: 5,\r\n  },\r\n});\r\n\r\nexport default RegisterScreen;\r\n"]},"metadata":{},"sourceType":"module"}