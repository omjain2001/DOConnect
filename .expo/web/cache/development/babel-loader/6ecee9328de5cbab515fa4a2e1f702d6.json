{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Web dev\\\\DOConnect\\\\app\\\\screens\\\\LoginScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Button, Icon, IndexPath, Input, Layout, Radio, RadioGroup, Select, SelectItem } from \"@ui-kitten/components\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport ErrorMsg from \"../components/ErrorMsg\";\nimport { Login } from \"../auth/auth\";\nimport Form from \"../components/forms/Form\";\nimport FormField from \"../components/forms/FormField\";\nimport SubmitForm from \"../components/forms/SubmitForm\";\nimport { firestore } from \"../auth/firebase\";\nimport { USER_TYPE } from \"../redux/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUser, setUserType } from \"../redux/actions/authActions\";\nimport { CustomSpinner } from \"./CustomSpinner\";\n\nvar AlertIcon = function AlertIcon(props) {\n  return React.createElement(Icon, _extends({}, props, {\n    name: \"alert-circle-outline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 30\n    }\n  }));\n};\n\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required(\"Required\").label(\"Email\"),\n  password: Yup.string().required(\"Required\").min(5).label(\"Password\")\n});\n\nfunction LoginScreen(_ref) {\n  var _this2 = this;\n\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      secureTextEntry = _useState2[0],\n      setSecureTextEntry = _useState2[1];\n\n  var _useState3 = useState(new IndexPath(0)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedIndex = _useState4[0],\n      setSelectedIndex = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var toggleSecureEntry = function toggleSecureEntry() {\n    setSecureTextEntry(!secureTextEntry);\n  };\n\n  var renderIcon = function renderIcon(props) {\n    return React.createElement(TouchableWithoutFeedback, {\n      onPress: toggleSecureEntry,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }\n    }, React.createElement(Icon, _extends({}, props, {\n      name: secureTextEntry ? \"eye-off\" : \"eye\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    })));\n  };\n\n  var userType = [\"Doctor\", \"Patient\"];\n  var auth = useSelector(function (state) {\n    return state.auth;\n  });\n  var dispatch = useDispatch();\n\n  var handleSubmit = function handleSubmit(values) {\n    var type, user, errorCode;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            type = userType[selectedIndex.row].toLowerCase() === USER_TYPE.DOCTOR ? USER_TYPE.DOCTOR : USER_TYPE.PATIENT;\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Login(values.email, values.password));\n\n          case 5:\n            user = _context.sent;\n\n            if (user.user) {\n              dispatch(setUserType(type));\n              dispatch(fetchUser(values.email, type)).then(function (res) {\n                setIsLoading(false);\n\n                if (!res.data.isProfileSet) {\n                  navigation.navigate(\"doctorRegistration\", {\n                    screen: \"DoctorRegistrationForm\"\n                  });\n                } else {\n                  if (type === USER_TYPE.DOCTOR) {\n                    console.log(\"Redirect to Doctor dashboard\");\n                  } else {\n                    console.log(\"Redirect to Patient dashboard\");\n                  }\n                }\n              });\n            } else {\n              setIsLoading(false);\n              alert(\"Invalid user or user type\");\n            }\n\n            _context.next = 14;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            setIsLoading(false);\n            errorCode = _context.t0.code;\n\n            if (errorCode === \"auth/wrong-password\") {\n              alert(\"Wrong Password\");\n            } else {\n              alert(_context.t0.message);\n            }\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 9]], Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, React.createElement(Layout, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, React.createElement(CustomSpinner, {\n    visible: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), React.createElement(Form, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, React.createElement(FormField, {\n    name: \"email\",\n    label: \"Email\",\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }), React.createElement(FormField, {\n    name: \"password\",\n    label: \"Password\",\n    placeholder: \"Password\",\n    accessoryRight: renderIcon,\n    captionIcon: AlertIcon,\n    secureTextEntry: secureTextEntry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }), React.createElement(Layout, {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, React.createElement(Select, {\n    label: \"User Type\",\n    value: userType[selectedIndex.row],\n    selectedIndex: selectedIndex,\n    onSelect: function onSelect(index) {\n      return setSelectedIndex(index);\n    },\n    style: {\n      width: \"100%\",\n      paddingHorizontal: 5,\n      marginVertical: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, React.createElement(SelectItem, {\n    title: \"Doctor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }), React.createElement(SelectItem, {\n    title: \"Patient\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }))), React.createElement(SubmitForm, {\n    label: \"Login\",\n    btnStyle: {\n      width: \"80%\",\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }), React.createElement(SubmitForm, {\n    label: \"Register\",\n    btnStyle: {\n      width: \"80%\"\n    },\n    onPress: function onPress() {\n      return navigation.navigate(\"DoctorPatientScreen\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: 100,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 10\n  },\n  inputFields: {\n    paddingVertical: 60,\n    width: 300\n  },\n  btns: {\n    marginVertical: 5,\n    width: 300\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["D:/Web dev/DOConnect/app/screens/LoginScreen.js"],"names":["React","useState","Button","Icon","IndexPath","Input","Layout","Radio","RadioGroup","Select","SelectItem","Formik","Yup","ErrorMsg","Login","Form","FormField","SubmitForm","firestore","USER_TYPE","useDispatch","useSelector","fetchUser","setUserType","CustomSpinner","AlertIcon","props","validationSchema","object","shape","email","string","required","label","password","min","LoginScreen","navigation","secureTextEntry","setSecureTextEntry","selectedIndex","setSelectedIndex","isLoading","setIsLoading","toggleSecureEntry","renderIcon","userType","auth","state","dispatch","handleSubmit","values","type","row","toLowerCase","DOCTOR","PATIENT","user","then","res","data","isProfileSet","navigate","screen","console","log","alert","errorCode","code","message","styles","container","width","index","paddingHorizontal","marginVertical","marginTop","StyleSheet","create","alignItems","justifyContent","inputFields","paddingVertical","btns"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  TouchableWithoutFeedback,\r\n  Image,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport {\r\n  Button,\r\n  Icon,\r\n  IndexPath,\r\n  Input,\r\n  Layout,\r\n  Radio,\r\n  RadioGroup,\r\n  Select,\r\n  SelectItem,\r\n} from \"@ui-kitten/components\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport ErrorMsg from \"../components/ErrorMsg\";\r\nimport { Login } from \"../auth/auth\";\r\nimport Form from \"../components/forms/Form\";\r\nimport FormField from \"../components/forms/FormField\";\r\nimport SubmitForm from \"../components/forms/SubmitForm\";\r\nimport { firestore } from \"../auth/firebase\";\r\nimport { USER_TYPE } from \"../redux/constants\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUser, setUserType } from \"../redux/actions/authActions\";\r\nimport { CustomSpinner } from \"./CustomSpinner\";\r\n\r\nconst AlertIcon = (props) => <Icon {...props} name=\"alert-circle-outline\" />;\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().required(\"Required\").label(\"Email\"),\r\n  password: Yup.string().required(\"Required\").min(5).label(\"Password\"),\r\n});\r\n\r\nfunction LoginScreen({ navigation }) {\r\n  const [secureTextEntry, setSecureTextEntry] = useState(true);\r\n  const [selectedIndex, setSelectedIndex] = useState(new IndexPath(0));\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const toggleSecureEntry = () => {\r\n    setSecureTextEntry(!secureTextEntry);\r\n  };\r\n\r\n  const renderIcon = (props) => (\r\n    <TouchableWithoutFeedback onPress={toggleSecureEntry}>\r\n      <Icon {...props} name={secureTextEntry ? \"eye-off\" : \"eye\"} />\r\n    </TouchableWithoutFeedback>\r\n  );\r\n\r\n  const userType = [\"Doctor\", \"Patient\"];\r\n  const auth = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = async (values) => {\r\n    setIsLoading(true);\r\n\r\n    const type =\r\n      userType[selectedIndex.row].toLowerCase() === USER_TYPE.DOCTOR\r\n        ? USER_TYPE.DOCTOR\r\n        : USER_TYPE.PATIENT;\r\n\r\n    try {\r\n      const user = await Login(values.email, values.password);\r\n      if (user.user) {\r\n        dispatch(setUserType(type));\r\n        dispatch(fetchUser(values.email, type)).then((res) => {\r\n          setIsLoading(false);\r\n          if (!res.data.isProfileSet) {\r\n            navigation.navigate(\"doctorRegistration\", {\r\n              screen: \"DoctorRegistrationForm\",\r\n            });\r\n          } else {\r\n            if (type === USER_TYPE.DOCTOR) {\r\n              console.log(\"Redirect to Doctor dashboard\");\r\n            } else {\r\n              console.log(\"Redirect to Patient dashboard\");\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        setIsLoading(false);\r\n        alert(\"Invalid user or user type\");\r\n      }\r\n\r\n      //  // Check whether user for specified userType exists or not.\r\n      //   const getUser = await firestore\r\n      //     .collection(\r\n      //       userType[selectedIndex.row].toLowerCase() === USER_TYPE.DOCTOR\r\n      //         ? COLLECTION.DOCTOR\r\n      //         : COLLECTION.PATIENT\r\n      //     )\r\n      //     .where(\"email\", \"==\", values.email)\r\n      //     .get();\r\n\r\n      //   if (getUser.docs.length > 0) {\r\n      //     const user = await Login(values.email, values.password);\r\n\r\n      //     if (user.user) {\r\n      //       await dispatch(setUser(getUser.docs[0].data()));\r\n      //       if (!auth.user.isProfileSet) {\r\n      //         navigation.navigate(\"DoctorRegistrationForm\");\r\n      //       }\r\n      //     }\r\n      //   } else {\r\n      //     alert(`Invalid user or user type`);\r\n      //   }\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      const errorCode = error.code;\r\n      if (errorCode === \"auth/wrong-password\") {\r\n        alert(\"Wrong Password\");\r\n      } else {\r\n        alert(error.message);\r\n      }\r\n    }\r\n\r\n    // if (userType[selectedIndex.row] === \"Doctor\") {\r\n    //   const getUser = await firestore\r\n    //     .collection(\"doctors\")\r\n    //     .where(\"email\", \"==\", values.email)\r\n    //     .get();\r\n\r\n    //     if(getUser.docs().length > 0){\r\n    //       const user = await Login(values.email, values.password);\r\n    //       if(user.user){\r\n    //         console.log(\"User Logged in successfully\");\r\n    //         console.log(auth.currentUser);\r\n    //       }\r\n    //     }\r\n    //     else {\r\n    //       alert(\"User is not a doctor\");\r\n    //     }\r\n    // }\r\n    // else {\r\n    //   const getUser = await firestore\r\n    //   .collection(\"patients\")\r\n    //   .where(\"email\", \"==\", values.email)\r\n    //   .get();\r\n\r\n    //   if(getUser.docs().length > 0){\r\n    //     const user = await Login(values.email, values.password);\r\n    //     if(user.user){\r\n    //       console.log(\"User Logged in successfully\");\r\n    //       console.log(auth.currentUser);\r\n    //     }\r\n    //   }\r\n    //   else {\r\n    //     alert(\"User is not a patient\");\r\n    //   }\r\n    // }\r\n\r\n    /**\r\n     * TODO\r\n     * 1. If the user type is doctor, then he should be directed to Doctor Dashboard\r\n     * 2. If the user type is patient, then he should be directed to Patient Dashboard\r\n     * 3. If user is a patient and selects doctor, throw error\r\n     * 4. If user is a doctor and selects patient, throw error\r\n     */\r\n    // if (user.user) {\r\n    //   if (userType[selectedIndex] == \"patient\") {\r\n    //     console.log(\"Should navigate to Patient Dashboard\");\r\n    //   } else {\r\n    //     console.log(\"Should navigate to Patient Dashboard\");\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <ScrollView>\r\n      <Layout style={styles.container}>\r\n        {/* <Image\r\n          source={require(\"../asset/login.png\")}\r\n          style={{ height: 300, width: 300 }}\r\n        /> */}\r\n        <CustomSpinner visible={isLoading} />\r\n        <Form\r\n          initialValues={{ email: \"\", password: \"\" }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={validationSchema}\r\n        >\r\n          <FormField name=\"email\" label=\"Email\" placeholder=\"Email\" />\r\n          <FormField\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            placeholder=\"Password\"\r\n            accessoryRight={renderIcon}\r\n            captionIcon={AlertIcon}\r\n            secureTextEntry={secureTextEntry}\r\n          />\r\n          <Layout style={{ width: \"100%\" }}>\r\n            <Select\r\n              label=\"User Type\"\r\n              value={userType[selectedIndex.row]}\r\n              selectedIndex={selectedIndex}\r\n              onSelect={(index) => setSelectedIndex(index)}\r\n              style={{\r\n                width: \"100%\",\r\n                paddingHorizontal: 5,\r\n                marginVertical: 10,\r\n              }}\r\n            >\r\n              <SelectItem title=\"Doctor\" />\r\n              <SelectItem title=\"Patient\" />\r\n            </Select>\r\n          </Layout>\r\n          <SubmitForm\r\n            label=\"Login\"\r\n            btnStyle={{ width: \"80%\", marginTop: 20 }}\r\n          />\r\n          <SubmitForm\r\n            label=\"Register\"\r\n            btnStyle={{ width: \"80%\" }}\r\n            onPress={() => navigation.navigate(\"DoctorPatientScreen\")}\r\n          />\r\n          {/* {({ handleChange, handleSubmit, errors }) => (\r\n            <>\r\n              <View style={styles.inputFields}>\r\n                <Input\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  onChangeText={handleChange(\"name\")}\r\n                />\r\n                <ErrorMsg>{errors.name}</ErrorMsg>\r\n\r\n                <Input\r\n                  label=\"Password\"\r\n                  placeholder=\"Password\"\r\n                  caption=\"Should contain at least 5 characters\"\r\n                  accessoryRight={renderIcon}\r\n                  captionIcon={AlertIcon}\r\n                  secureTextEntry={secureTextEntry}\r\n                  onChangeText={handleChange(\"pass\")}\r\n                />\r\n                <ErrorMsg>{errors.pass}</ErrorMsg>\r\n              </View>\r\n              <Layout>\r\n                <Select\r\n                  label=\"Type of User\"\r\n                  value={userType[selectedIndex]}\r\n                  selectedIndex={selectedIndex}\r\n                  onSelect={(index) => setSelectedIndex(index)}\r\n                >\r\n                  <SelectItem title=\"Doctor\" />\r\n                  <SelectItem title=\"Patient\" />\r\n                </Select>\r\n              </Layout>\r\n              <View>\r\n                <Button style={styles.btns} onPress={handleSubmit}>\r\n                  LOGIN\r\n                </Button>\r\n                <Button\r\n                  style={styles.btns}\r\n                  onPress={() => navigation.navigate(\"DoctorPatientScreen\")}\r\n                >\r\n                  REGISTER\r\n                </Button>\r\n              </View>\r\n            </>\r\n          )} */}\r\n        </Form>\r\n      </Layout>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginVertical: 100,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingHorizontal: 10,\r\n  },\r\n  inputFields: {\r\n    paddingVertical: 60,\r\n    width: 300,\r\n  },\r\n  btns: {\r\n    marginVertical: 5,\r\n    width: 300,\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n"]},"metadata":{},"sourceType":"module"}