{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { auth, firestore } from \"../../auth/firebase\";\nimport { SET_USER, SET_USER_TYPE, FETCH_HOSPITAL_DATA, SET_ERROR, SET_ISLOADING, COLLECTION, USER_TYPE } from \"../constants\";\nexport var fetchUser = function fetchUser(email, userType) {\n  return function _callee(dispatch) {\n    var getUser, hospitalData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(firestore.collection(userType.toLowerCase() === USER_TYPE.DOCTOR.toLowerCase() ? COLLECTION.DOCTOR : COLLECTION.PATIENT).where(\"email\", \"==\", email).get());\n\n          case 3:\n            getUser = _context.sent;\n\n            if (!(getUser.docs.length > 0)) {\n              _context.next = 12;\n              break;\n            }\n\n            dispatch({\n              type: SET_USER,\n              payload: getUser.docs[0].data()\n            });\n\n            if (!(userType.toLowerCase() === USER_TYPE.DOCTOR.toLowerCase())) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(firestore.collection(COLLECTION.HOSPITAL).doc(getUser.docs[0].id).get());\n\n          case 9:\n            hospitalData = _context.sent;\n\n            if (hospitalData.exists) {\n              dispatch({\n                type: FETCH_HOSPITAL_DATA,\n                payload: hospitalData\n              });\n            }\n\n          case 11:\n            return _context.abrupt(\"return\", new Promise(function (res) {\n              res({\n                status: \"success\",\n                message: \"Data fetched successfully\",\n                data: getUser.docs[0].data()\n              });\n            }));\n\n          case 12:\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", new Promise(function (res, rej) {\n              rej({\n                status: \"error\",\n                message: _context.t0.message\n              });\n            }));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n};\nexport var setUser = function setUser(user) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n\n            if (!(getState().auth.userType === USER_TYPE.DOCTOR)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(firestore.collection(COLLECTION.DOCTOR).doc(getState().auth.user.id).set(user, {\n              merge: true\n            }));\n\n          case 4:\n            _context2.next = 8;\n            break;\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(firestore.collection(COLLECTION.PATIENT).doc(getState().auth.user.id).set(user, {\n              merge: true\n            }));\n\n          case 8:\n            dispatch({\n              type: SET_USER,\n              payload: user\n            });\n            return _context2.abrupt(\"return\", new Promise(function (res) {\n              return res({\n                status: \"success\",\n                message: \"Profile updated successfully\"\n              });\n            }));\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: SET_ERROR,\n              payload: _context2.t0.message\n            });\n            return _context2.abrupt(\"return\", new Promise(function (res) {\n              return res({\n                status: \"error\",\n                message: _context2.t0.message\n              });\n            }));\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};\nexport var setUserType = function setUserType(type) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: SET_USER_TYPE,\n      payload: type\n    });\n  };\n};\nexport var setUserState = function setUserState(user) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_USER,\n      payload: user\n    });\n  };\n};\nexport var fetchHospitalData = function fetchHospitalData(UID) {\n  return function _callee3(dispatch) {\n    var getHospital;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            dispatch({\n              type: SET_ISLOADING,\n              payload: true\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(firestore.collection(\"hospitals\").where(\"UID\", \"==\", UID).get());\n\n          case 4:\n            getHospital = _context3.sent;\n\n            if (!(getHospital.size === 1)) {\n              _context3.next = 10;\n              break;\n            }\n\n            getHospital.forEach(function (doc) {\n              dispatch({\n                type: FETCH_HOSPITAL_DATA,\n                payload: _objectSpread({\n                  id: doc.id\n                }, doc.data())\n              });\n            });\n            return _context3.abrupt(\"return\", new Promise(function (res) {\n              return res({\n                status: \"success\",\n                message: \"Hospital details fetched successfully\"\n              });\n            }));\n\n          case 10:\n            return _context3.abrupt(\"return\", new Promise(function (res, rej) {\n              return rej({\n                status: \"error\",\n                message: \"Hospital does not exist\"\n              });\n            }));\n\n          case 11:\n            _context3.next = 16;\n            break;\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](0);\n            return _context3.abrupt(\"return\", new Promise(function (res, rej) {\n              return rej({\n                status: \"error\",\n                message: _context3.t0.message\n              });\n            }));\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};","map":{"version":3,"sources":["D:/Web dev/DOConnect/app/redux/actions/authActions.js"],"names":["auth","firestore","SET_USER","SET_USER_TYPE","FETCH_HOSPITAL_DATA","SET_ERROR","SET_ISLOADING","COLLECTION","USER_TYPE","fetchUser","email","userType","dispatch","collection","toLowerCase","DOCTOR","PATIENT","where","get","getUser","docs","length","type","payload","data","HOSPITAL","doc","id","hospitalData","exists","Promise","res","status","message","rej","setUser","user","getState","set","merge","setUserType","setUserState","fetchHospitalData","UID","getHospital","size","forEach"],"mappings":"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","sourcesContent":["import { auth, firestore } from \"../../auth/firebase\";\r\nimport {\r\n  SET_USER,\r\n  SET_USER_TYPE,\r\n  FETCH_HOSPITAL_DATA,\r\n  SET_ERROR,\r\n  SET_ISLOADING,\r\n  COLLECTION,\r\n  USER_TYPE,\r\n} from \"../constants\";\r\n\r\n// Fetching user details and hospital details (if user is doctor)\r\nexport const fetchUser = (email, userType) => async (dispatch) => {\r\n  try {\r\n    const getUser = await firestore\r\n      .collection(\r\n        userType.toLowerCase() === USER_TYPE.DOCTOR.toLowerCase()\r\n          ? COLLECTION.DOCTOR\r\n          : COLLECTION.PATIENT\r\n      )\r\n      .where(\"email\", \"==\", email)\r\n      .get();\r\n\r\n    if (getUser.docs.length > 0) {\r\n      dispatch({\r\n        type: SET_USER,\r\n        payload: getUser.docs[0].data(),\r\n      });\r\n\r\n      if (userType.toLowerCase() === USER_TYPE.DOCTOR.toLowerCase()) {\r\n        const hospitalData = await firestore\r\n          .collection(COLLECTION.HOSPITAL)\r\n          .doc(getUser.docs[0].id)\r\n          .get();\r\n        if (hospitalData.exists) {\r\n          dispatch({\r\n            type: FETCH_HOSPITAL_DATA,\r\n            payload: hospitalData,\r\n          });\r\n        }\r\n      }\r\n\r\n      return new Promise((res) => {\r\n        res({\r\n          status: \"success\",\r\n          message: \"Data fetched successfully\",\r\n          data: getUser.docs[0].data(),\r\n        });\r\n      });\r\n    }\r\n  } catch (error) {\r\n    return new Promise((res, rej) => {\r\n      rej({\r\n        status: \"error\",\r\n        message: error.message,\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\n// Set or Update user in database and store\r\nexport const setUser = (user) => async (dispatch) => {\r\n  try {\r\n    if (getState().auth.userType === USER_TYPE.DOCTOR) {\r\n      await firestore\r\n        .collection(COLLECTION.DOCTOR)\r\n        .doc(getState().auth.user.id)\r\n        .set(user, { merge: true });\r\n    } else {\r\n      await firestore\r\n        .collection(COLLECTION.PATIENT)\r\n        .doc(getState().auth.user.id)\r\n        .set(user, { merge: true });\r\n    }\r\n\r\n    dispatch({\r\n      type: SET_USER,\r\n      payload: user,\r\n    });\r\n\r\n    return new Promise((res) =>\r\n      res({\r\n        status: \"success\",\r\n        message: \"Profile updated successfully\",\r\n      })\r\n    );\r\n  } catch (error) {\r\n    dispatch({\r\n      type: SET_ERROR,\r\n      payload: error.message,\r\n    });\r\n\r\n    return new Promise((res) =>\r\n      res({\r\n        status: \"error\",\r\n        message: error.message,\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\n// Set user type in store\r\nexport const setUserType = (type) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: SET_USER_TYPE,\r\n    payload: type,\r\n  });\r\n};\r\n\r\n// Set user state in store\r\nexport const setUserState = (user) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_USER,\r\n    payload: user,\r\n  });\r\n};\r\n\r\n// Fetch hospital through UID\r\nexport const fetchHospitalData = (UID) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: SET_ISLOADING,\r\n      payload: true,\r\n    });\r\n\r\n    const getHospital = await firestore\r\n      .collection(\"hospitals\")\r\n      .where(\"UID\", \"==\", UID)\r\n      .get();\r\n\r\n    if (getHospital.size === 1) {\r\n      getHospital.forEach((doc) => {\r\n        dispatch({\r\n          type: FETCH_HOSPITAL_DATA,\r\n          payload: {\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          },\r\n        });\r\n      });\r\n\r\n      return new Promise((res) =>\r\n        res({\r\n          status: \"success\",\r\n          message: \"Hospital details fetched successfully\",\r\n        })\r\n      );\r\n    } else {\r\n      // dispatch({\r\n      //   type: SET_ERROR,\r\n      //   payload: \"Hospital does not exist\",\r\n      // });\r\n      return new Promise((res, rej) =>\r\n        rej({\r\n          status: \"error\",\r\n          message: \"Hospital does not exist\",\r\n        })\r\n      );\r\n    }\r\n  } catch (e) {\r\n    // dispatch({\r\n    //   type: SET_ERROR,\r\n    //   payload: e.message,\r\n    // });\r\n\r\n    return new Promise((res, rej) =>\r\n      rej({\r\n        status: \"error\",\r\n        message: e.message,\r\n      })\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}